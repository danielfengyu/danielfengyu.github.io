<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山间听雨者主页</title>
  <subtitle>个人学习总结</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-04T10:53:17.538Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Daniel</name>
    <email>fengyu153610@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GVim的编码设置</title>
    <link href="http://yoursite.com/2017/04/04/GVim%E7%9A%84%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/04/04/GVim的编码设置/</id>
    <published>2017-04-04T10:48:09.000Z</published>
    <updated>2017-04-04T10:53:17.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gvim的基本设置"><a href="#gvim的基本设置" class="headerlink" title="gvim的基本设置"></a>gvim的基本设置</h1><hr>
<h2 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h2><p><code>set fileencodings=utf-8,chinese,latin-1</code></p>
<p><code>set termencoding=utf-8</code></p>
<p><code>set encoding=utf-</code></p>
]]></content>
    
    <summary type="html">
    
      在使用vim过程中的一些总结
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="工具类学习" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>我的阅读清单</title>
    <link href="http://yoursite.com/2017/03/19/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2017/03/19/我的阅读清单/</id>
    <published>2017-03-19T09:47:00.000Z</published>
    <updated>2017-04-21T12:03:37.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《未来简史》"><a href="#《未来简史》" class="headerlink" title="《未来简史》"></a>《未来简史》</h1><hr>
<h2 id="作品简介"><a href="#作品简介" class="headerlink" title="作品简介"></a>作品简介</h2><p>本书的作者是以色列的尤瓦尔.赫拉利，他本人是一个研究历史的历史学家，但他却在很多方面都有自己独到的见解，因此，从他的作品中，我们会发现他在讲述历史并不单单是只从历史范畴来阐明他的观点。他一般会旁征博引，如他的《人类简史》，讲述的是人类发展的变迁史。但其中涉及极其广泛，包括生物学、物理学、社会学等。所以读他的作品，并不会是我们的思维受到限制，相反，通过它睿智的文笔和独特视角我们会看到一个不一样的世界。他的作品都是各个学科交叉的，所以不管你是什么专业的人，你都能从他的作品中得到一些启示。你会认为他的作品不够专业，但是你有没有想过，当今的任何学科都不可能孤立存在，就像历史，难道我们只能去抛开一堆土，告诉你这大概是哪个时代的泥土吗？不，那绝对枯燥而没有说服力，一个优秀的历史学家除了侃侃而谈的告诉你他的历史见解外，一般会用上其他学科的研究成果来佐证他的推断，比如生物学。</p>
<p>本书立意新奇，站在未来的角度审视过去——二十一世纪。在二十一世纪，人类几乎战胜了所有人类过去所面临的难题，包括战争、瘟疫、疾病、饥饿等。在这之前的历史中是很难想象的，到底人类为什么发展得如此惊人，在书中也有所阐明，是在于人类这种生物具有强大的生物算法。过去的历史我们认为是因为人类具有心智、抽象思维等。而在本书中，作者推陈出新，他跳出了宗教的范畴，站在一个更高的高度来审视人类本身。人类并不是神造，相反我们人类正在逐渐成为我们心中所想的神。随着人类的进步，宗教也总是在不断自我的修正，但他们都逃不开神学的范畴，宗教还想用一个高度抽象的实体来约束人类，但随着科技、哲学的发展，人类发现自己进入一些以前只有神能前往的地方，于是神学，上帝就显得不那么高高在上，神神秘秘了。二十世纪，人文主义高度发展，分化出了许多人文观点：自由人文主义、民族人文主义和社会人文主义。这三个主义虽有所不同，但都强调人是一个独立的个体，有自我意识，人这个独立的个体最了解自己。但进入二十一世纪之后，尤其是生物学，计算机科学的蓬勃发展，尤其是人工智能的发展，我们发现我们并不是最了解自己的，我们做出的任何决定似乎并不是自由意识的表现，好像是许多生化反应产生的，也可以叫做某种算法，也就是说我们的任何行为都是由已经存在我们身体中的生物算法导致的。</p>
<p>作者把有机世界的行为都归结于算法，是算法推动了这个世界不停的运转。直到有一天，人类掌握了隐藏在我们DNA中的生物算法，我们就可能超神了。其实到目前为止，我们已经研究出来一些纯只能的算法，他们的运算能力已经超越了人类。在未来这个万物链接的时代，人类不是升级就是被淘汰。</p>
<h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>暂且不论作者书中所说的会不会发生，面对飞速发展的今天，我们必须时刻保持学习，少一点时间不学习就会被这个时代所抛弃。我们要时刻准备迎接作者书中所描述的那个伟大的时代，不要在那个时代被置于最低等的位置，甚至成为下一代智人的宠物。不要感叹时光的飞逝，因为这个时代没有让你感叹的功夫，有那功夫还不如学习。</p>
<h1 id="《浪潮之巅》"><a href="#《浪潮之巅》" class="headerlink" title="《浪潮之巅》"></a>《浪潮之巅》</h1><hr>
<h2 id="作品简介-1"><a href="#作品简介-1" class="headerlink" title="作品简介"></a>作品简介</h2><p>作者吴军，吴军博士写过许多了不起的书，如《数学之美》、《文明之光》等。他的书既体现吴军博士的专业素养，又显现了吴军博士的广播知识，他的书易于阅读，不管你是什么专业的，阅读他的书都不会被其中的专业词语所困惑，他通常能用简介的语句介绍这些专业术语。</p>
<p>书中主要介绍硅谷的一些大的科技公司，这些科技公司曾经都引领过一个时代，是那个时代的弄潮儿，这些公司多半都曾经站到过科技巨浪的浪头。很多公司经过了短暂的辉煌后，或从此消失，或一蹶不振。而有的公司难逢敌手，屹立不倒，经久不衰。其中的原因是什么，其中又包含有什么规律。关于这些问题，作者在书中都给我们一一解答，或是企业基因决定，或是没有把握在浪潮之巅的绝佳机会，或是商业策略上的失误，或是没有随时代不断革新。</p>
<p>最怕的是有一个愚蠢的领导，书中介绍的很多巨无霸公司的没落，很多原因是领导的失误，也有的是历史的必然。通过叙述这些曾经的弄潮儿，作者深入分析他们长盛不衰的秘密和昙花一现的命运。总之我们从书中能一窥那些曾经或现在依然不可一世的企业，我们也要环顾我们的四周，分析自己所处的环境，以期有所作为，前面的浪潮我们没有赶上，希望我们不要错过接下来的新的浪潮。我们或许应该感谢这个时代，我们中国人没有那一次离浪潮之巅这么近，只要我们把握了硅谷成功的诀窍，我想我们也是大有可为的。接下来的人工智能、万物互联僵尸新的一波浪潮，不知道我们有没有准备好。</p>
<h2 id="个人感悟-1"><a href="#个人感悟-1" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>过去的二十世纪，科技的浪潮不是很多，但如今这个时代，科技浪潮是一波接着一波，一不小心，我们这些澎湃向前的浪潮头所抛下，唯有学习，静待下一波浪潮，争取成为新一波浪潮的弄潮儿，不负青春，不负自己。</p>
<h1 id="《人性的弱点》"><a href="#《人性的弱点》" class="headerlink" title="《人性的弱点》"></a>《人性的弱点》</h1><hr>
<h2 id="作品简介-2"><a href="#作品简介-2" class="headerlink" title="作品简介"></a>作品简介</h2><p>作者戴尔.卡耐基,美国。本书所涉及的是中国所谓的处世哲学，比如怎么与人沟通，怎么让自己受欢迎，怎么能说服别人等。本书并不单纯的像中国的许多厚黑之学，或是官场秘籍。作者所述或是基于科学实验，或是基于自己的人生经验，也有的是历史人物的启示，但也不缺少作者本人的一些教学实践。可以说如果按照作者所说的来处理人际关系，保管无往不胜。</p>
<p>本书的立意并不是什么鸿篇巨制，喝多都是一些个人经历，名人经历，并没有上升到经世济民的高度，但正因为如此，这本书才值得我们这些普通人阅读，不仅仅是简单的阅读，而是要像宗教圣书一样，反复专研，多多实践，不断领悟，对就是领悟，不要以为书中所说实在简单不过，那只是因为作者把握语言的能力太强了，使得本书从型上看确实简单，但深入思考，你会发现作者所说确实在理。</p>
<p>为了尽量说得通俗，书中，作者举例颇多，看到这些例子，读者会有一种正在实践他所说的处事方法的感觉，这样一来书中所讲的道理就会深刻的印在我们头脑中。但只是简单的装入我们的头脑还是不够的，这只达到了作者目的一小部分，作用要的是我们要用这些方法论不断实践，使得书中的那些理论真实的为我所用。</p>
<p>书中涉及到的主要是做一个怎样的人才能收欢迎，但我们不能单纯的做自己，还要从所面对的对象出发，做一个他人喜欢的人，书中的很多人性弱点，不止我们有，别人也不缺，我们应该学会推己及人，争取做一个自己喜欢，别人也喜欢的自我。</p>
<h2 id="个人感悟-2"><a href="#个人感悟-2" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>很多时候，你希望别人有的，也是别人希望你有的；有时候，你拥有的，并且你也喜欢的并不是别人喜欢的。在于朋友、家人、陌生人的交往中，我们尽量要做让别人喜欢的字节，隐藏那些别人不喜欢的特点，这些特点对你本人来说，很可能不是什么坏事，但凡是我们要从所面对的对象的心里、眼里出发。懂得了人性的弱点也就懂得了尊重别人、理解别人，也能宽恕自己。</p>
<h1 id="《我敢在你怀里孤独》"><a href="#《我敢在你怀里孤独》" class="headerlink" title="《我敢在你怀里孤独》"></a>《我敢在你怀里孤独》</h1><hr>
<h2 id="作品简介-3"><a href="#作品简介-3" class="headerlink" title="作品简介"></a>作品简介</h2><p>作者刘若英，台湾，演员。作为一个演员，别人看到的知识作者本人的光鲜的一面，以为他们到哪里都是众星捧于，而我们却没怎没想过，他们也是凡人，他们也害怕凡人所怕的事。你我都害怕孤独，更别说演员了，对于这个职业，我想他们更害怕孤独，更害怕在大众的视野中消失。单本书的作者，作为一个演员却爱上了孤独（或许这是一种独处，安静的方式），爱上了独处，总是想方设法的制造独处的环境。通过作者本人的自述，我们看到了作者另辟蹊径，安然生活。面对孤独，我们需要一种态度，一种对生活，对生命的冷静思考方式。</p>
<p>书中作者除了介绍自己喜欢孤独的原因，创造孤独的方法外，还介绍了另外几名一人对孤独生活的理解。通过作者的叙述，我们看到了光鲜一人的常人的一面，但也不寻常的一面，他们居然喜欢孤独和独处的感觉。作者本人不仅喜欢独处，还创造了许多独处的方法，即便在人来人往的城市生活中，需要多方顾忌考虑的家庭琐事中，作者都能寻觅出以方安静，独自一人的天地，比如独自旅游，独自KTV等。</p>
<h2 id="个人感悟-3"><a href="#个人感悟-3" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>在生活中我们都是社群人员，都必须参与到社交生活中，好比社交是人类不可或缺的本性。但我们害怕什么，什么就总是形影不离，许多人害怕在这个喧嚣的社群中被冷落，被遗弃，被遗忘。以至于都认为孤独感是一种很不好的情绪。</p>
<p>然而作者本人却显现出了与这个时代大相径庭，格格不入的一个面，喜欢孤独，希望独处，甚至在家里面也是如此，面对家人也是如此。在独处的思考中，作者发现了独处的妙处。当然，当发现独处的好的时候，我们更倾向于与独处的生活，这并不是为了彰显自己的独一无二，抑或是表达自己清高的形象，而是，独处确确实实妙不可言，只是很多人还不知道而已。</p>
<p>很多人害怕孤独，害怕孑然一身，总是寻求热闹，但是出于喧嚣的闹市的时候，他们却倍感孤独，那是一种恐惧感。如果我们不能抵抗孤独，还不如顺手接受它。内心的孤独，无论到哪里，你都是寂寞的砧上肉，盘中餐，只有内在的丰富，让你无论到哪里都能与许多伟大的灵魂为伍。</p>
<p>在这纷繁复杂的尘世，更需要能在别人怀里孤独的勇气。</p>
<h1 id="一问一世界"><a href="#一问一世界" class="headerlink" title="一问一世界"></a>一问一世界</h1><hr>
<h2 id="作品简介-4"><a href="#作品简介-4" class="headerlink" title="作品简介"></a>作品简介</h2><p>作者杨澜，新闻媒体人。作者作为一个采访过500多为当今世界上的名人，问了许多问题。如果要有一个人告诉我们，我们应该怎样提问，尤其是面对我们自己的时候，那我想本书的作者确实是一个可以给你这方面指导的人。作者是一个在中国的新闻行业有着举足轻重的地位的女主持人，她温柔，美丽。勇于最求自己心中的梦想，她以自己的坚持缔造了一个时代。</p>
<p>作者成为风云人物并不是偶然，而是她个人充分的准备和持之以恒的努力。她的坚持不仅体现在个人的事业上，还体现在了他个人的生活中。</p>
<h2 id="个人感悟-4"><a href="#个人感悟-4" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>提问是一门艺术，并不是简简单单的在句子的末尾提高声调那么简单，我们需要知道我们提问的真正目的，问题的好坏并不在于你问句中所使用的华丽辞藻，而是你能得到的回答的好坏和意义。社交生活中我们说的话多数不是陈述句，大多是问句，所以要多学学怎样提问。提问并不简单，需要提问者做充足准备，比如要了解你所问人的生活背景，专业，性格，职业等等。还要明白你提问的目的，如果回答这偏题了，提问者需要怎么引导，总之就是一种社交的技能。</p>
<h1 id="《编码》"><a href="#《编码》" class="headerlink" title="《编码》"></a>《编码》</h1><h2 id="2017年04月21日"><a href="#2017年04月21日" class="headerlink" title="2017年04月21日"></a>2017年04月21日</h2><h2 id="作品简介-5"><a href="#作品简介-5" class="headerlink" title="作品简介"></a>作品简介</h2><p>作者Charles Petzold，Window编程的开创者之一。书中，作者从生活中的普通故事，孩童时代的普通想法开始写起，通过生活中很常见的事物，把我们认为高深莫测的编码技术讲解得通俗易懂。在今天看来我们的计算机是一件极其复杂的工具，只能是天才才能设计出这样精密而又复杂的工具，但通过作者对计算机的发展历史的描述，我们发现计算机组成与设计其实都是基于一些很是简单的原理和技术，这恰巧就是人类的创造力所在，通过简单的积木搭建，加上人类自己的奇思妙想，看似复杂的计算机其实其基础是一些极其基础的技术和原理。</p>
<p>我们平时要表达情感，或者是要传送的信息，其实都是经过了某种形式的编码的，只是我们不知道而已。所以说编码无处不在。人类的一个梦想就是能创造一个能明白人类情感，或是能传送人类想表达的信息的工具，这个工具就是电脑。其实想要电脑了解我们人类的意图，原理是很简单的，只需要在电脑和人类之间约定一中电脑和人类都能理解的编码规则即可。曾经人类为了电脑（机器）能理解我们的意图，创造了很多编码，可是或多或少都存在一些问题，如果某套编码要人类理解起来容易，那么设计的电脑（机器）就越是复杂。如果要机器设计起来容易，那么人类理解该套编码就越难。当今的点脑能认识的编码是简单得不能再简单的二进制编码，这套编码让人类理解起来确实困难不少，但聪明的人类想到了一个解决这个困难的办法，就是发明一个译码器在机器和人类之间充当翻译，把机器能识别的二进制串转化为人类能理解的编码——文字、图片和视频等，或是把文字、图片和视频等转化为二进制串。</p>
<p>既然说到了二进制，也要强调下。在书中作者冲十进制说起，分析数据这种编码在人类社会生活中出现的原因和必然性，然后逐步扩展到二进制，而二进制能在现代计算机中使用，也并非偶然，为了说明二进制最终成为机器（电脑）的编码，作者回顾了人类历史上的许多通信方式，一开始人类的通信方式受到距离和时间的限制，要想远距离通信，就要抛弃实时性，要想实时通信，就要限制通信的距离。人类一直在寻找一种即能进行远距离通信，又能保证实时的通信方式。在这思想（梦想）的指导下，人类的通信有了烽火、电报等方式。而电报的通信原理和方式为现代计算机的发展奠定了不可磨灭的基础和部分理论。电报系统中的局电器为信息传输提供了理论支撑，电磁继电器的开闭，为我们传输一些简单的信息奠定了基础，而这些看似简单的信息，通过组合可以表达很大的信息量，这就是现代电脑理解的信息（编码）是二进制的由来。</p>
<h2 id="个人感悟-5"><a href="#个人感悟-5" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>一切信息都能进行某种编码方式表达，不然就不是信息。看似复杂的东西，其基础都是一些简单的原理，所以遇到问题不能复杂化，只有通过简单创造出来的东西才是伟大的。很多事物的产生或者出现并不是一蹴而就的，是需要不断演进，不断合并而创造出来的。</p>
]]></content>
    
    <summary type="html">
    
      2017年打算阅读100本书，不分类别，是书就行。为此，在这里简略的记录下自己的阅读感慨
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Winodws 下搭建wiki知识库</title>
    <link href="http://yoursite.com/2016/12/31/Winodws-%E4%B8%8B%E6%90%AD%E5%BB%BAwiki%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    <id>http://yoursite.com/2016/12/31/Winodws-下搭建wiki知识库/</id>
    <published>2016-12-31T11:54:54.000Z</published>
    <updated>2016-12-31T15:59:05.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写本文的起因"><a href="#写本文的起因" class="headerlink" title="写本文的起因"></a>写本文的起因</h1><hr>
<p>在平时的工作和学习的过程中积累了许多的知识和经验总结，苦于难以管理，时间长了，找到一些之前的总结就比较困难。为此需要一款能够管理成体系的管理知识的工具，我就选定了dokuwiki。</p>
<h1 id="dokuwiki简介"><a href="#dokuwiki简介" class="headerlink" title="dokuwiki简介"></a>dokuwiki简介</h1><hr>
<ol>
<li>一款开源的wiki引擎程序，运行与PHP环境下。</li>
<li>小巧而功能强大，灵活，适合中小团队和个人网站知识库的管理。</li>
<li>可以多种CMS程序进行整合，例如<a href="http://baike.baidu.com/subview/23618/23618.htm" target="_blank" rel="external">WordPress</a>、<a href="http://baike.baidu.com/subview/685204/685204.htm" target="_blank" rel="external">XOOPS</a>、PostNuke等。</li>
<li>不需要数据库，采用文本文件直接存储<h1 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h1></li>
</ol>
<hr>
<ol>
<li>下载<a href="https://download.dokuwiki.org/" target="_blank" rel="external">dokuwiki</a>.</li>
<li>下载PHP运行环境：<a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="external">XAMPP</a><h1 id="安装PHP开发环境-XAMPP"><a href="#安装PHP开发环境-XAMPP" class="headerlink" title="安装PHP开发环境:XAMPP"></a>安装PHP开发环境:XAMPP</h1></li>
</ol>
<hr>
<p>和安装普通的Windows软件并没有区别</p>
<h1 id="部署dokuwiki"><a href="#部署dokuwiki" class="headerlink" title="部署dokuwiki"></a>部署dokuwiki</h1><hr>
<p>解压下载的dokuwiki，把整个dokuwiki目录放到XAMPP的安装目录下的htdocs目录下。</p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><hr>
<p>在XAMPP的安装目录下打开XAMPP的控制面板，启动Apache（因为dokuwiki运行需要Apache服务器）。<br>在浏览器中输入：<a href="http://localhost/dokuwiki" target="_blank" rel="external">http://localhost/dokuwiki</a> 。就可以访问你部署的dokuwiki了。</p>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><hr>
<p>在浏览器中输入：<a href="http://localhost/dokuwiki/install.php，就可以看到wiki的安装配置项了，在右上角还可以选择语言。" target="_blank" rel="external">http://localhost/dokuwiki/install.php，就可以看到wiki的安装配置项了，在右上角还可以选择语言。</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.dabu.info/dokuwiki-installation-and-configuration.html" target="_blank" rel="external">http://www.dabu.info/dokuwiki-installation-and-configuration.html</a></p>
]]></content>
    
    <summary type="html">
    
      作为一个程序员，在工作或学习的过程中难免遇到许多需要记下的知识点，如果只是很少的知识，我们直接用操作系统自带的文档管理系统，建一些目录就能轻松搞定自己平时的知识的积累，但是当我们的积累的东西过多了之后就会发现我们的积累很难管理。我们这时通常想的是希望有一个能对知识进行结构化管理的工具，wiki就是其中以中工具，具有强大的知识库管理功能。下面我将介绍一下怎么在Windows系统下安装部署wiki。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>我的2016</title>
    <link href="http://yoursite.com/2016/12/31/%E6%88%91%E7%9A%842016/"/>
    <id>http://yoursite.com/2016/12/31/我的2016/</id>
    <published>2016-12-31T10:14:14.000Z</published>
    <updated>2017-01-01T09:14:27.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="满怀希望的起航-怅然无措的结束"><a href="#满怀希望的起航-怅然无措的结束" class="headerlink" title="满怀希望的起航 怅然无措的结束"></a>满怀希望的起航 怅然无措的结束</h1><p>过完2016年的春节，没几天，我又踏上了离乡的路途。带着自己的梦想和亲人的寄托，我独自一人又一个去了远方。这一次看似和以前并没有什么不同，但却也有些许变化，这一次春节后离家并不是去另一个温馨的家——校园，而是有一点悲壮之感——去闯荡江湖了。梦想着在这个纷乱复杂的江湖中打下自己的一片天地，成就一番事业。真是一入江湖岁月催，眨眼功夫，还在做着白日梦，还在天真的以为这个江湖就是我大展拳脚的地方，在江湖这片天地中，我定当能成就一番功名。却不成想，也就在今天我快要关上了2016的大门了，我已经不能再次拜访者无所收获的2016了。唯有把这一年的点滴记录下来，以慰即将逝去的2016。2016年一过我又长大一岁了，不！不是长大一岁，而是成熟一岁了，唉！突然发现成长这个词语已经不适用在我的身上了。心中满是仿徨与失望。</p>
<h1 id="泯然一个市井之徒"><a href="#泯然一个市井之徒" class="headerlink" title="泯然一个市井之徒"></a>泯然一个市井之徒</h1><p>记得2016年的元旦前夕，公司部门采访了个人的新年愿望，我当时无知的把我的新年愿望写为：成为一个技术牛人。眨眼间，我来到了2017年的元旦的前夕。回想当时的新年愿望，觉着我自个真是很傻很天真的标杆人物啊！<br>经过2016一整年，虽然自己在工作中也是一如既往的一丝不苟，但却没有觉着自己的技术有些许进步，相反，我却觉着自己比以前知道的更少、更无知。即便在这平凡的一年中，个人的梦想仍没被时间抹杀分毫，但也不得不面对现实，我确实进步甚少。参加工作一年以来，自己并没有多大进步，却泯然众人矣。<br>我不得承认，我已经从一个意气风发的学生时代的少年变成了一个市井之徒。是环境的原因？是个人的原因？我不得而知，但我觉着我应该寻求改变。</p>
<h1 id="忙睡觉的月下老人，贪玩的丘比特"><a href="#忙睡觉的月下老人，贪玩的丘比特" class="headerlink" title="忙睡觉的月下老人，贪玩的丘比特"></a>忙睡觉的月下老人，贪玩的丘比特</h1><p>那时我想，我还小，还年轻，不着急恋爱，不着急找一个能懂我的人，况且，找一个懂我的人，那就如同在这浩瀚的宇宙中寻找地外生命一样的难。如今真的觉着自己已经到时间来一场恋爱的洗礼的时候，却发现我周围的资源是少得异乎寻常。<br>我虽然条件不好，但在人海中找不到一个人能看上我？我觉着没有可能。我估摸着是那个老糊涂的，为别人搭线的月下老人在月亮下睡着了。这个老人不靠谱，本指望那个可爱的小孩能拿我的一支箭射中某一个忧郁的怀着丁香般惆怅的姑娘，可惜他好像正在玩耍，也不见得会里一下我。<br>这两位神和我开了一个玩笑。我也觉着两个高高在上的神怎会拿我这样一个小人物来开玩笑呢，但也许我真的不是一个小人物。<br>估计今年回家又不安心了，我老妈，不知从什么时候开始就希望能抱孙子了，反正今年又要对不起妈她老人家了。</p>
<h1 id="失信于自己"><a href="#失信于自己" class="headerlink" title="失信于自己"></a>失信于自己</h1><p>在2016年的到来的时候，我决定每周看一本书，沉淀自己的知识与提高自己的智商。但在后来2016的旅途中，我找各种理由来阻碍了这个伟大的梦想。我一直坚持做一个不失信与人的人，但我发现对别人承若，我基本都能信守承若，却没有把我自己当一个人来看，我居然失信于我自己了。<br>在2016年的年初，我计划，花几个月的时间来做一个开源的网站，但后来我没有坚持下来，我再次失信于我自己。<br>在2016刚开始的时候，当我遇见我心怡的女孩我一定下手，但当我真的遇到后，我又不忍心了。<br>计划来次牛逼点，规格高点的旅行，但由于死宅，计划没有成行。</p>
<h1 id="匆忙的2016，慢条斯理的我"><a href="#匆忙的2016，慢条斯理的我" class="headerlink" title="匆忙的2016，慢条斯理的我"></a>匆忙的2016，慢条斯理的我</h1><p>曾经的岁月，自己白长了，直到今天我才发现，这个时间过得太他妈快了，小息一会就要到2017了。我他妈一直以年轻为资本，很多反驳的理由都是还早，但马上翻过2016的时候，我才发现他妈的一点都不早了，他妈的我一点都不小了，相反我发现我有点老了，老得都不知道时间了，老得任性都不知道了。背对2016离开时，我喊了一声，时间，你慢点吧，可回音只在2017的天空徘徊，2016失去了一切响应。</p>
<h1 id="面对2017"><a href="#面对2017" class="headerlink" title="面对2017"></a>面对2017</h1><p>面对2017我觉着我成熟了不少，我决定不再随便许诺，尤其是对我自己；不再随便敷衍，尤其是对我自己；不再懦弱，尤其是在面对月下老人和丘比特时。我要相信这个世界的规律，人总会老去，很多事不要等着，拖到将来，其实现在就是过去的将来。</p>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>曾经我们希望成长，而今我们不能成长了，只能成熟了！</p>
]]></content>
    
    <summary type="html">
    
      即将跨入2017年，我想想的2016年是不是应该留下些什么，我不想在将来的某一天提到2016，在我的思绪深处却没有什么印象，空白一片，就像2016曾经在我的生命中与我插肩而过一样，没有丝丝留恋；没有分毫经历；故此，在这里记下一笔，即便我的2016年并不想你或者我想的那样精彩，但她毕竟路过了我的生命，我也需要给她一点生气，一点空间。
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs 学习</title>
    <link href="http://yoursite.com/2016/10/23/NodeJs-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/10/23/NodeJs-学习/</id>
    <published>2016-10-23T08:26:26.000Z</published>
    <updated>2016-10-23T09:48:33.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NodeJs的回调"><a href="#NodeJs的回调" class="headerlink" title="NodeJs的回调"></a>NodeJs的回调</h1><hr>
<ul>
<li><p>Node.js 异步编程的直接体现就是回调。</p>
</li>
<li><p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。</p>
</li>
<li><p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p>
</li>
</ul>
<p><strong><em>注意：异步代表代码是非阻塞的，阻塞按是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</em></strong></p>
<h1 id="NodeJs的事件驱动模型"><a href="#NodeJs的事件驱动模型" class="headerlink" title="NodeJs的事件驱动模型"></a>NodeJs的事件驱动模型</h1><hr>
<ul>
<li><p>Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。</p>
</li>
<li><p>Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。</p>
</li>
<li><p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p>
</li>
<li><p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>
<h2 id="一个简单的事件驱动模型例子"><a href="#一个简单的事件驱动模型例子" class="headerlink" title="一个简单的事件驱动模型例子"></a>一个简单的事件驱动模型例子</h2><p>Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。</p>
</li>
</ul>
<p><strong><em>注意：这里的观察者模式的观察者（Observer）是事件处理函数，主题（Subject）是事件</em></strong></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre><code>// 引入 events 模块 
var events = require(&apos;events&apos;);
// 创建 eventEmitter 对象
var eventEmitter = new events.EventEmitter();
// 创建事件处理程序
var connectHandler = function connected() {
console.log(&apos;连接成功。&apos;);
// 触发 data_received 事件 
eventEmitter.emit(&apos;data_received&apos;);
}
// 绑定 connection 事件处理程序
eventEmitter.on(&apos;connection&apos;, connectHandler);
// 使用匿名函数绑定 data_received 事件
eventEmitter.on(&apos;data_received&apos;, function(){
console.log(&apos;数据接收成功。&apos;);
});
// 触发 connection 事件 
eventEmitter.emit(&apos;connection&apos;);
console.log(&quot;程序执行完毕。&quot;);
</code></pre>]]></content>
    
    <summary type="html">
    
      NodeJs的基础知识的学习，学习NodeJs的基础是需要了解一些JavaScript的知识。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>npm使用介绍</title>
    <link href="http://yoursite.com/2016/10/20/npm%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2016/10/20/npm使用介绍/</id>
    <published>2016-10-20T14:42:16.000Z</published>
    <updated>2016-10-20T14:44:22.135Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.runoob.com/nodejs/nodejs-npm.html" title="npm使用介绍" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-npm.html</a></p>
]]></content>
    
    <summary type="html">
    
      npm使用介绍的相关网站
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="前端编程" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署问题</title>
    <link href="http://yoursite.com/2016/10/20/hexo%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/10/20/hexo部署问题/</id>
    <published>2016-10-20T14:33:23.000Z</published>
    <updated>2016-10-20T14:39:20.738Z</updated>
    
    <content type="html"><![CDATA[<p>hexo发布项目到github上时出了问题，其原因是没有配置git相关的环境变量，而hexo deploy命令需要调用git命令。<br>解决方法：</p>
<ul>
<li><p>配置git的环境变量</p>
</li>
<li><p>直接使用git的命令窗口运行hexo相关的命令，尤其是hexo deploy命令</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo发布项目到github上时出了问题，其原因是没有配置git相关的环境变量，而hexo deploy命令需要调用git命令。&lt;br&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置git的环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接使用git的命令窗口运行hexo
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue开发大型单页应用的步骤</title>
    <link href="http://yoursite.com/2016/10/20/%E4%BD%BF%E7%94%A8Vue%E5%BC%80%E5%8F%91%E5%A4%A7%E5%9E%8B%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2016/10/20/使用Vue开发大型单页应用的步骤/</id>
    <published>2016-10-20T13:24:13.000Z</published>
    <updated>2016-10-20T14:06:20.584Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>首先开发机器上要安装nodejs服务（怎么安装网上有一堆教程）。</li>
<li><p>安装js包管理器npm。如果你安装的是比较新的nodejs,则npm包管理器已经随之安装，如果使用的是比较旧版的nodejs可能需要自己安装npm包安装管理器。也有可能你觉得随nodejs一起安装的npm比较旧，我们可以通过如下命令安装npm。   </p>
<blockquote>
<p>sudo npm install npm -g（Linux系统）</p>
<p>npm install npm -g （windows系统）</p>
</blockquote>
</li>
<li><p>npm是所谓的包管理器，所以可以通过npm命令安装nodejs模块</p>
<blockquote>
<p>npm install &lt; Module Name &gt;</p>
</blockquote>
</li>
<li><p>使用npm安装Vue</p>
<blockquote>
<p>npm install vue （本地安装）</p>
<p>npm install vue -g (全局安装)</p>
</blockquote>
</li>
<li><p>使用npm安装Vuejs官方提供的一个可以快速搭建大型单页应用的命令行工具 vue-cli,该工具其实是一个脚手架</p>
<blockquote>
<p>npm install -g vue-cli</p>
</blockquote>
</li>
<li><p>创建一个基于“Webpack”模板的项目</p>
<blockquote>
<p>vue init webpack &lt; my-project &gt;</p>
</blockquote>
</li>
<li><p>安装依赖</p>
<blockquote>
<p>cd &lt; my-project &gt;</p>
<p>npm install</p>
<p>npm run dev(启动应用)</p>
</blockquote>
</li>
<li><p>编译单页应用</p>
<blockquote>
<p>npm run build</p>
</blockquote>
</li>
</ul>
<p><strong>注意：手动编译Vue最新的代码</strong></p>
<blockquote>
<p>git clone <a href="https://github.com/vuejs/vue.git" target="_blank" rel="external">https://github.com/vuejs/vue.git</a> node_modules/vue</p>
<p>cd node_modules/vue</p>
<p>npm install</p>
<p>npm run build</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      本文主要讲解怎么快速构建一个基于Vue的大型的单页应用。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编码学习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>编码过程中的注意事项</title>
    <link href="http://yoursite.com/2016/09/14/%E7%BC%96%E7%A0%81%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://yoursite.com/2016/09/14/编码过程中的注意事项/</id>
    <published>2016-09-14T15:20:54.000Z</published>
    <updated>2016-09-15T03:48:38.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在工作中发现最令我苦恼的居然是怎么给一个变量、方法或函数命名，有时候会纠结我一个上午，甚至一天之后还会耿耿于怀。所以一直希望总结一下怎么给变量、方法或函数命名。</p>
<h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><p>言归正传，目前比较流行的命名规则有：帕斯卡命名法和驼峰命名法。帕斯卡命名的规则是从名称的第一个字单词开始，每一个单词的首字母大写；驼峰命名的规则是名称的第一个单词全部字母小写，之后的每个单词的首字母大写。一般来说类名称采用帕斯卡命名法，变量名和方法或函数名采用驼峰法命名规则。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>见名知意：通常来说，一个变量的名称应该能表现它的使用场景、范围、性质等，一个方法或函数的名称应该尽可能描述其功用和动作。</li>
<li>对于方法或函数的命名通常要用动词，因为方法或函数表现得就应该是一个动作（这里的一个动作很重要，不要一个方法包含过多的动作，方法的职责应该单一）。</li>
<li>命名是不要用一些太泛泛的单词，而应该具体点，最好根据使用场景命名。例如对于获取数据，很多人都是用getSomething,这有点泛泛。为了命名的精准，应该多积累词汇。对于获取数据：如果只是简单的返回数据，使用getSomething；如果是从远程获取数据，使用fetchSomething；如果只是从本地加载数据，使用loadSomething；如果是从缓存中获取数据，使用findSomething；如果是通过某些数据衍生而来，可以使用createSomething(data)，buildSomething(data)，parseSomething(data)。</li>
<li>不同的项目，因为使用场景的、使用技术不同，很可能命名规则也不同。在项目进行前，应该先规范整个团队的命名规则。</li>
<li>函数使用者在调用函数时，参数名称应该跟函数定义者给的形参的名称一致。</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><ul>
<li>不要用boolean变量作为函数的参数，如果出现这种情况，需要考虑重写函数。</li>
<li>不要修改传入函数中的参数。</li>
<li>返回不能是传入的参数，否则意味着一个函数中实现了不止一个功能，要进来达到单一职责原则。</li>
</ul>
<h2 id="函数体编写"><a href="#函数体编写" class="headerlink" title="函数体编写"></a>函数体编写</h2><ul>
<li>必须是相关的操作放在一起构成一个函数，而不是一个函数只求功能齐全，而不注重复用，函数就是复用的最小单元。</li>
<li><p>尽量减少代码嵌套</p>
<blockquote>
<ol>
<li>函数最容易终止的判断分支放在判断的最前面。</li>
<li>如果使用判断语句，发现判断分支太多，就不应该使用判断，换一种方法实现同样的功能，例如使用表驱动法。</li>
</ol>
</blockquote>
<p>  if(condition == “case1”){ </p>
<pre><code>return 1; 
</code></pre><p>  } elseif(condition == “case2”){</p>
<pre><code>return 2; 
</code></pre><p>  } elseif(condition == “case3”){</p>
<pre><code>return 3;
</code></pre><p>  } elseif(condition == “case4”){</p>
<pre><code>return 4; 
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>表驱动方法</p>
</blockquote>
<pre><code>var map = { 
    &quot;case1&quot;:1,
    &quot;case2&quot;:2, 
    &quot;case3&quot;:3, 
    &quot;case4&quot;:4 
} 
return map[condition];
</code></pre><blockquote>
<p>3.多层嵌套时，可以提取内层嵌套为一个函数或方法进行调用。</p>
<p>4.for循环的嵌套层数应该尽可能的少</p>
</blockquote>
<ul>
<li>提取复杂逻辑，语义化</li>
</ul>
]]></content>
    
    <summary type="html">
    
      工作中关于变量、方法或函数命名规范的总结。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>一些疑问</title>
    <link href="http://yoursite.com/2016/09/04/%E4%B8%80%E4%BA%9B%E7%96%91%E9%97%AE/"/>
    <id>http://yoursite.com/2016/09/04/一些疑问/</id>
    <published>2016-09-04T11:18:20.000Z</published>
    <updated>2016-09-11T12:42:02.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是回调函数？"><a href="#1-什么是回调函数？" class="headerlink" title="1.什么是回调函数？"></a>1.什么是回调函数？</h1><blockquote>
<p>回调函数就是你写好一个函数，让预先写好的系统来调用。你去调用系统的函数，是直调。让系统调用你的函数，就是回调。回调函数可以看成，让别人做事，传进去的额外信息。</p>
<p>简单一点说：回调函数是调用者传递给被调用者的函数。做什么事只有调用者知道，但调用者不能直接去“做”，因为调用者可能不具备执行这个动作的全部条件；但是被调用者具有执行这个动作的所有条件，只是他不知道该怎么去做。调用者调用被调用者时传递回调函数给被调用者，就告诉被调用者用其所具备的条件去执行这个动作。其中：做什么样的事就是回调函数。</p>
<p>在动态语言中表现为直接传递一个方法（或函数）；在静态语言中可能是通过函数指针来传递的（例如C），也可能是通过interface实现的（例如Java）</p>
<p>实现这种机制的原理：函数接受的参数，我们通常叫做“数据”，其实这是不完全正确的，其实我们传递给函数的参数实质都是二进制代码。基本类型的数据可以看成是二进制，函数类型的数据也是可以看做二进制的。总之代码和数据都是一个性质，共性都是信息。</p>
</blockquote>
<h1 id="2-CSS中的绝对定位和相对定位"><a href="#2-CSS中的绝对定位和相对定位" class="headerlink" title="2.CSS中的绝对定位和相对定位"></a>2.CSS中的绝对定位和相对定位</h1><p><strong>相对定位</strong>：就是一个元素本身自己位置的变化，如一个元素开始时设置其position的值为relative，那么它就会在文档流中占据一个自己本身的位置，当设置了其top和left值后就会相对于它本身的位置偏移。在使用相对定位时，无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。那么我们就会想了怎么让框三把框二覆盖呢，很自然的想到把框3的z-index设为一个优先级高的值如100，但是这样并不能得到我们想要的结果，必须把框2的z-index设为优先级低的如-1。相对定位就是文旦流的默认定位方式。</p>
<p><strong>绝对定位</strong>：使用的绝对定位（position:absolute）的元素不存在文档流中，普通流中其它元素的布局就像绝对定位的元素不存在一样，所以在文档流中不占据空间。因此如果一个元素的position设置为absolute，会影响它的兄弟元素的相对定位（默认定位）从而改变它的兄弟节点在文档流中的位置。绝对定位的元素的位置相对于最近的已定位（拥有position属性）祖先元素，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块。</p>
<p>总之，相对定位是“相对于”元素在文档中的初始位置，而绝对定位是“相对于”最近的已定位祖先元素，如果不存在已定位的祖先元素，那么“相对于”最初的包含块。</p>
<p>扩展，还可以使用margin属性来进行绝对定位，这时元素也脱离了文档流，不管它的祖先元素有没有定位，都是以文档流中原来所在的位置上偏移参照物。  </p>
]]></content>
    
    <summary type="html">
    
      解答编码中遇到的一些疑难、重点知识。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编码学习" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>个人博客——基于hexo的Github.page</title>
    <link href="http://yoursite.com/2016/09/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84Github%20Page/"/>
    <id>http://yoursite.com/2016/09/03/个人博客——基于hexo的Github Page/</id>
    <published>2016-09-03T11:45:37.000Z</published>
    <updated>2016-09-04T08:58:32.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人博客——基于hexo的Github-page"><a href="#个人博客——基于hexo的Github-page" class="headerlink" title="个人博客——基于hexo的Github.page"></a>个人博客——基于hexo的Github.page</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>安装NodeJs</li>
<li>安装Git</li>
</ul>
<h2 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h2><p>建立与你用户名对应的仓库，仓库名必须为【yourusername.github.io】</p>
<center><br><img src="http://i2.buimg.com/567571/b5aabb76dc5a87c2.png" alt="Alt loading" title="新建仓库"><br></center>

<center><br><img src="http://i4.buimg.com/567571/3b507106c15b47a5.png" alt="Alt loading" title="填写新建仓库的信息"><br></center>

<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><pre><code>//全局安装hexo,安装完成后可以在nodejs/node_gloabal/node_modules下看到
$ npm install hexo-cli -g
</code></pre><h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><pre><code>$ hexo init &lt;floder&gt; #初始化blog所在的文件夹
$ cd blog #进入你所设置的blog文件夹
$ npm install
$ hexo server #启动hexo
$ hexo new &quot;Hello Hexo&quot; #新建一个名叫 Hello Hexo的博文
$ hexo generate #生成通用的静态文件
</code></pre><p>进入blog目录：</p>
<center><br><img src="http://i2.buimg.com/567571/1cf76e414967c4d6.png" alt="Alt loading" title="运行hexo init &lt;floder&gt;生成的blog的目录结构"><br></center>

<p>启动hexo生成的blog：</p>
<center><br><img src="http://i2.buimg.com/567571/6eb68cc3c7a76fd9.png" alt="Alt loading" title="成功启动hexo"><br></center>

<p>访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>:</p>
<center><br><img src="http://i2.buimg.com/567571/7de0d6da7ae949a8.png" alt="ALt loading" title="浏览器中成功访问生成的blog"><br></center>

<h2 id="Hexo常用的命令"><a href="#Hexo常用的命令" class="headerlink" title="Hexo常用的命令"></a>Hexo常用的命令</h2><pre><code>hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）
hexo deploy #将.deploy目录部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本
hexo clean #清空public目录下生成的内容
</code></pre><h2 id="修改配置文件-config-yml"><a href="#修改配置文件-config-yml" class="headerlink" title="修改配置文件 _config.yml"></a>修改配置文件 _config.yml</h2><p>该文件中多数选项都有说明，按照说明配置即可。这里主要介绍如何把Hexo构建的blog部署到github page上。</p>
<p>部署方式配置前：</p>
<center><br><img src="http://i2.buimg.com/567571/cb0cd68f7c7bed4e.png" alt="ALt loading" title="部署方式配置前"><br></center>

<p>部署方式配置后,（仓库地址获取于github上新建的名称为yourusename.github.io的库）</p>
<center><br><img src="http://i2.buimg.com/567571/bd2ca1fcf811e9cf.png" alt="Alt loading" title="部署方式配置后"><br></center>

<center><br><img src="http://i2.buimg.com/567571/113d87f21a6a3502.png" alt="Alt loading" title="获取仓库地址"><br></center>

<h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><p>这里主要讲解设置主题：Tinnypp</p>
<p>1.安装Tinnypp</p>
<pre><code>cd themes
git clone git@github.com:levonlin/Tinnypp.git
</code></pre><center><br><img src="http://i2.buimg.com/567571/e86eb329acd6f195.png" alt="Alt loading" title="安装Tinnypp主题"><br></center>

<p>2.修改_config.yml配置文件中的主题设置为：Tinnypp</p>
<center><br><img src="http://i4.buimg.com/567571/4a28326b980d9290.png" alt="Alt loading" title="修改主题"><br></center>

<p>3.更新主题</p>
<pre><code>cd themes/Tinnypp
git pull
</code></pre><p>4.设置主题配置信息</p>
<p>（1）设置blog首页的按钮，如果直接使用默认配置，点击按钮会出现404错误，原因是blog部署后按钮所指向目录就是根目录。</p>
<center><br><img src="http://i2.buimg.com/567571/98bc8d9a49063abe.png" alt="Alt loading" title="按钮的URL设置前"><br></center>

<center><br><img src="http://i4.buimg.com/567571/2b36fd9a01bfe314.png" alt="Alt loading" title="按钮的URL设置后"><br></center>

<p>（2）已经设置/atom.xml为rss源。要使用rss,先安装hexo的rss插件：</p>
<pre><code>$npm install hexo-generator-feed --save
</code></pre><p> 修改Tinnypp配置文件_config.yml中的RSS设置，因为安装rss源是在根目录下/atom.xml，但是默认的配置文件中的RSS 地址是: /Tinnypp/atom.xml</p>
<center><br><img src="http://i2.buimg.com/567571/69b0a373a5c0a75f.png" alt="Alt loading" title="修改前"><br></center>

<center><br><img src="http://i2.buimg.com/567571/97bb747d68ce2823.png" alt="Alt loading" title="修改后"><br></center>

<p>5.主题切换后 blog的首页</p>
<center><br><img src="http://i2.buimg.com/567571/7c1868648614812c.png" alt="Alt loading" title="切换主题后的首页"><br></center>

<p>6.设置tags和categories</p>
<p>(1).tags设置</p>
<p>在themes/Tinnypp/source/下新建文件夹tags，在文件夹中新建文件index.md，在index.md文件中新增内容：</p>
<center><br><img src="http://i4.buimg.com/567571/22b36d60fb766cc9.png" alt="Alt loading" title="index.md中的内容"><br></center>

<p>(2).categories设置<br>在themes/Tinnypp/source/下新建文件夹categories，在文件夹中新建文件index.md，在index.md文件中新增内容：</p>
<center><br><img src="http://i4.buimg.com/567571/22b36d60fb766cc9.png" alt="Alt loading" title="index.md中的内容"><br></center>

<p>设置后的目录结构：</p>
<center><br><img src="http://i1.piimg.com/567571/ba893bb91a362072.png" alt="Alt loading" title="tags和categories设置"><br></center>

<p>7.新建blog文章</p>
<pre><code>hexo new &quot;Test&quot;
</code></pre><p>打开blog目录下的../source/_posts/Test.md文件</p>
<center><br><img src="http://i1.piimg.com/567571/caa7baa5aab508de.png" alt="Alt loading" title="默认内容"><br></center>

<p>修改默认内容后</p>
<center><br><img src="http://i2.buimg.com/567571/f204735ba668d05e.png" alt="Alt loading" title="修改后的默认内容"><br></center>

<p>8.重新启动hexo查看设置情况</p>
<pre><code>hexo clean
hexo generator
hexo server
</code></pre><center><br><img src="http://i1.piimg.com/567571/5aadbc05c5aca7fa.png" alt="Alt loading" title="tags和categories设置后的blog首页"><br></center>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">hexo安装配置</a></li>
<li><a href="http://www.isetsuna.com/hexo/introduction/" target="_blank" rel="external">hexo安装配置1</a></li>
<li><a href="http://www.isetsuna.com/hexo/install-config/" target="_blank" rel="external">hexo安装配置2</a></li>
<li><a href="http://www.isetsuna.com/hexo/theme-plugin/" target="_blank" rel="external">hexo安装配置3</a></li>
<li><a href="http://www.isetsuna.com/hexo/writing-image/" target="_blank" rel="external">hexo安装配置4</a></li>
<li><a href="http://www.isetsuna.com/hexo/deploy-github-gitcafe/" target="_blank" rel="external">hexo安装配置5</a></li>
<li><a href="http://www.isetsuna.com/hexo/deploy-qiniu/" target="_blank" rel="external">hexo安装配置6</a></li>
<li><a href="http://www.isetsuna.com/hexo/domain-dns/" target="_blank" rel="external">hexo安装配置7</a></li>
<li><a href="https://github.com/levonlin/Tinnypp" target="_blank" rel="external">博客主题切换</a></li>
<li><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785/" target="_blank" rel="external"> hexo部署个人博客全</a></li>
<li><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html" target="_blank" rel="external">利用swiftype为hexo添加站内搜索v2.0</a></li>
<li><a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="external">个人blog搭建全</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      通过Hexo生成、部署个人博客到Github Page上，本文涉及到Hexo的安装、个人博客网站的生成并对生成的网站代码进行重新配置、主题的切换及部署。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安装学习" scheme="http://yoursite.com/tags/%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs安装</title>
    <link href="http://yoursite.com/2016/09/03/NodeJs%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2016/09/03/NodeJs安装/</id>
    <published>2016-09-03T09:05:58.000Z</published>
    <updated>2016-09-03T11:21:26.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-安装及环境搭建"><a href="#Node-js-安装及环境搭建" class="headerlink" title="Node.js 安装及环境搭建"></a>Node.js 安装及环境搭建</h1><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><p>1.NODE<a href="https://nodejs.org/en/" target="_blank" rel="external">下载 </a> ，下载对应的操作系统版本即可。</p>
<p>2.Windows版本的NODE.js下载之后，双击即可安装，安装方式与普通的window软件相同。安装的时候记住安装的路径。</p>
<p>3.配置环境变量。</p>
<p>4.检查是否安装成功。node –version || node -v</p>
<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>1.git<a href="https://www.git-scm.com/download/" target="_blank" rel="external">下载</a></p>
<p>2.和安装一般的window程序并无差异。</p>
<p>3.设置git的环境变量。</p>
<p>4.打开cmd窗口，输入 git，检查是否安装配置成功。</p>
<h2 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h2><p>1.确保node和git都在环境变量PATH中</p>
<p>2.开始-&gt; 打开Git Shell,运行命令：</p>
<pre><code>mkdir npm
cd npm
git config --system http.sslcainfo /bin/curl-ca-bundle.crt
git clone --recursive git://github.com/isaacs/npm.git
cd npm
node cli.js install npm –gf
</code></pre>

<p>3.git 和npm被墙的解决办法</p>
<blockquote>
<ul>
<li>设置国内镜像  </li>
<li>git撞墙的解决办法：<br>设置代理服务器，使用一些免费的或者是商用的代理下载  </li>
<li>npm被墙的解决办法：<br>设置国内镜像 npm config set registry <a href="http://registry.npmjs.vitecho.com" target="_blank" rel="external">http://registry.npmjs.vitecho.com</a></li>
</ul>
</blockquote>
<p>4.配置npm的全局模块的存放路径以及cache的路径</p>
<blockquote>
<ul>
<li>启动cmd  </li>
<li>npm config set prefix “全局模块的存放路”  </li>
<li>npm config set cache “cache的路径”</li>
</ul>
</blockquote>
<p>5.例如我的就放在Node主目录下  </p>
<blockquote>
<ul>
<li>npm config set prefix “F:\nodejs\node_global”  </li>
<li>npm config set cache “F:\nodejs\node_cache”  </li>
</ul>
</blockquote>
<p>6.设置环境变量  </p>
<blockquote>
<ul>
<li>NODE_PATH = F:\nodejs\node_global\node_modules  </li>
<li>PATH = E:\nodejs\node_global\</li>
</ul>
</blockquote>
<p>7.安装express测试一下npm是否安装成功</p>
<p><pre><code>npm install express –g</code></pre></p>
<blockquote>
<p>-g代表安装到全局目录<br>安装成功后，在前面的node_global目录下多了一个目录node_modules/express，表示express安装成功</p>
</blockquote>
<h2 id="安装vue-js"><a href="#安装vue-js" class="headerlink" title="安装vue.js"></a>安装vue.js</h2><p><pre><code>#最新稳定版本<br>$ npm install vue<br></code></pre></p>
<h1 id="最新稳定-CSP-兼容版本"><a href="#最新稳定-CSP-兼容版本" class="headerlink" title="最新稳定 CSP 兼容版本"></a>最新稳定 CSP 兼容版本</h1><p><pre><code>$ npm install vue@csp<br></code></pre></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/pigtail/archive/2013/01/08/2850486.html" target="_blank" rel="external">http://www.cnblogs.com/pigtail/archive/2013/01/08/2850486.html</a><br><a href="http://xiaoyaojones.blog.163.com/blog/static/28370125201351501113581/" target="_blank" rel="external">http://xiaoyaojones.blog.163.com/blog/static/28370125201351501113581/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-js-安装及环境搭建&quot;&gt;&lt;a href=&quot;#Node-js-安装及环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Node.js 安装及环境搭建&quot;&gt;&lt;/a&gt;Node.js 安装及环境搭建&lt;/h1&gt;&lt;h2 id=&quot;Node-js安装&quot;&gt;&lt;a
    
    </summary>
    
      <category term="UI" scheme="http://yoursite.com/categories/UI/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/09/02/hello-world/"/>
    <id>http://yoursite.com/2016/09/02/hello-world/</id>
    <published>2016-09-02T14:57:49.034Z</published>
    <updated>2016-09-02T14:57:49.035Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
